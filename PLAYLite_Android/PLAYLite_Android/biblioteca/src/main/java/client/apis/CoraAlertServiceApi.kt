/**
 * PriluxWebUI API
 *
 * PriluxWebUI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.Alarmstate
import org.openapitools.client.models.CoraAlertCloseDto
import org.openapitools.client.models.CoraAlertCreateDto
import org.openapitools.client.models.CoraAlertListDtoPagedResultDto
import org.openapitools.client.models.CoraBoolErrorResponseDto
import org.openapitools.client.models.CoraSimpleAlertConfigurationDto
import org.openapitools.client.models.CoraSimpleAlertConfigurationDtoListResultDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CoraAlertServiceApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param coraAlertCloseDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAlertServiceCloseAlertPost(coraAlertCloseDto: CoraAlertCloseDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraAlertServiceCloseAlertPostWithHttpInfo(coraAlertCloseDto = coraAlertCloseDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraAlertCloseDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAlertServiceCloseAlertPostWithHttpInfo(coraAlertCloseDto: CoraAlertCloseDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraAlertServiceCloseAlertPostRequestConfig(coraAlertCloseDto = coraAlertCloseDto)

        return request<CoraAlertCloseDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAlertServiceCloseAlertPost
    *
    * @param coraAlertCloseDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAlertServiceCloseAlertPostRequestConfig(coraAlertCloseDto: CoraAlertCloseDto?) : RequestConfig<CoraAlertCloseDto> {
        val localVariableBody = coraAlertCloseDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/CoraAlertService/CloseAlert",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraAlertCreateDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAlertServiceCreateAlertPost(coraAlertCreateDto: CoraAlertCreateDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraAlertServiceCreateAlertPostWithHttpInfo(coraAlertCreateDto = coraAlertCreateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraAlertCreateDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAlertServiceCreateAlertPostWithHttpInfo(coraAlertCreateDto: CoraAlertCreateDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraAlertServiceCreateAlertPostRequestConfig(coraAlertCreateDto = coraAlertCreateDto)

        return request<CoraAlertCreateDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAlertServiceCreateAlertPost
    *
    * @param coraAlertCreateDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAlertServiceCreateAlertPostRequestConfig(coraAlertCreateDto: CoraAlertCreateDto?) : RequestConfig<CoraAlertCreateDto> {
        val localVariableBody = coraAlertCreateDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/CoraAlertService/CreateAlert",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraSimpleAlertConfigurationDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAlertServiceCreateUpdateSimpleAlertConfigurationPost(coraSimpleAlertConfigurationDto: CoraSimpleAlertConfigurationDto?) : Unit {
        val localVarResponse = apiServicesAppCoraAlertServiceCreateUpdateSimpleAlertConfigurationPostWithHttpInfo(coraSimpleAlertConfigurationDto = coraSimpleAlertConfigurationDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraSimpleAlertConfigurationDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAlertServiceCreateUpdateSimpleAlertConfigurationPostWithHttpInfo(coraSimpleAlertConfigurationDto: CoraSimpleAlertConfigurationDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppCoraAlertServiceCreateUpdateSimpleAlertConfigurationPostRequestConfig(coraSimpleAlertConfigurationDto = coraSimpleAlertConfigurationDto)

        return request<CoraSimpleAlertConfigurationDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAlertServiceCreateUpdateSimpleAlertConfigurationPost
    *
    * @param coraSimpleAlertConfigurationDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAlertServiceCreateUpdateSimpleAlertConfigurationPostRequestConfig(coraSimpleAlertConfigurationDto: CoraSimpleAlertConfigurationDto?) : RequestConfig<CoraSimpleAlertConfigurationDto> {
        val localVariableBody = coraSimpleAlertConfigurationDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/CoraAlertService/CreateUpdateSimpleAlertConfiguration",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param maxResultCount  (optional)
    * @param skipCount  (optional)
    * @param status  (optional)
    * @return CoraAlertListDtoPagedResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAlertServiceGetCoraAlertsByStatusGet(maxResultCount: kotlin.Int?, skipCount: kotlin.Int?, status: Alarmstate?) : CoraAlertListDtoPagedResultDto {
        val localVarResponse = apiServicesAppCoraAlertServiceGetCoraAlertsByStatusGetWithHttpInfo(maxResultCount = maxResultCount, skipCount = skipCount, status = status)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraAlertListDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param maxResultCount  (optional)
    * @param skipCount  (optional)
    * @param status  (optional)
    * @return ApiResponse<CoraAlertListDtoPagedResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAlertServiceGetCoraAlertsByStatusGetWithHttpInfo(maxResultCount: kotlin.Int?, skipCount: kotlin.Int?, status: Alarmstate?) : ApiResponse<CoraAlertListDtoPagedResultDto?> {
        val localVariableConfig = apiServicesAppCoraAlertServiceGetCoraAlertsByStatusGetRequestConfig(maxResultCount = maxResultCount, skipCount = skipCount, status = status)

        return request<Unit, CoraAlertListDtoPagedResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAlertServiceGetCoraAlertsByStatusGet
    *
    * @param maxResultCount  (optional)
    * @param skipCount  (optional)
    * @param status  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAlertServiceGetCoraAlertsByStatusGetRequestConfig(maxResultCount: kotlin.Int?, skipCount: kotlin.Int?, status: Alarmstate?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (status != null) {
                    put("status", listOf(status.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAlertService/GetCoraAlertsByStatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraSimpleAlertConfigurationDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAlertServiceGetSimpleAlertConfigurationsGet() : CoraSimpleAlertConfigurationDtoListResultDto {
        val localVarResponse = apiServicesAppCoraAlertServiceGetSimpleAlertConfigurationsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraSimpleAlertConfigurationDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraSimpleAlertConfigurationDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAlertServiceGetSimpleAlertConfigurationsGetWithHttpInfo() : ApiResponse<CoraSimpleAlertConfigurationDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraAlertServiceGetSimpleAlertConfigurationsGetRequestConfig()

        return request<Unit, CoraSimpleAlertConfigurationDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAlertServiceGetSimpleAlertConfigurationsGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraAlertServiceGetSimpleAlertConfigurationsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAlertService/GetSimpleAlertConfigurations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
