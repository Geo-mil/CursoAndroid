/**
 * PriluxWebUI API
 *
 * PriluxWebUI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.CoraAstronomicalClockConfigureDto
import org.openapitools.client.models.CoraBoolErrorResponseDto
import org.openapitools.client.models.CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
import org.openapitools.client.models.P2PCoraBoolErrorResponseDto
import org.openapitools.client.models.P2PCoraDimmCommandCreate
import org.openapitools.client.models.P2PCoraFirmwareUpdateJobDto
import org.openapitools.client.models.P2PCoraJobGetDto
import org.openapitools.client.models.P2PCoraJobGetDtoPagedResultDto
import org.openapitools.client.models.P2PCoraJobStatus
import org.openapitools.client.models.P2PCoraJobType
import org.openapitools.client.models.P2PCoraManagementJobDto
import org.openapitools.client.models.P2PSequenceProgramDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class P2PCoraJobApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param coraAstronomicalClockConfigureDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobCoonfigureAstronomicalClockPost(coraAstronomicalClockConfigureDto: CoraAstronomicalClockConfigureDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppP2PCoraJobCoonfigureAstronomicalClockPostWithHttpInfo(coraAstronomicalClockConfigureDto = coraAstronomicalClockConfigureDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraAstronomicalClockConfigureDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobCoonfigureAstronomicalClockPostWithHttpInfo(coraAstronomicalClockConfigureDto: CoraAstronomicalClockConfigureDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppP2PCoraJobCoonfigureAstronomicalClockPostRequestConfig(coraAstronomicalClockConfigureDto = coraAstronomicalClockConfigureDto)

        return request<CoraAstronomicalClockConfigureDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobCoonfigureAstronomicalClockPost
    *
    * @param coraAstronomicalClockConfigureDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobCoonfigureAstronomicalClockPostRequestConfig(coraAstronomicalClockConfigureDto: CoraAstronomicalClockConfigureDto?) : RequestConfig<CoraAstronomicalClockConfigureDto> {
        val localVariableBody = coraAstronomicalClockConfigureDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/CoonfigureAstronomicalClock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2PCoraDimmCommandCreate  (optional)
    * @return P2PCoraDimmCommandCreate
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobCreateCoraP2PDimmCommandPost(p2PCoraDimmCommandCreate: P2PCoraDimmCommandCreate?) : P2PCoraDimmCommandCreate {
        val localVarResponse = apiServicesAppP2PCoraJobCreateCoraP2PDimmCommandPostWithHttpInfo(p2PCoraDimmCommandCreate = p2PCoraDimmCommandCreate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as P2PCoraDimmCommandCreate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2PCoraDimmCommandCreate  (optional)
    * @return ApiResponse<P2PCoraDimmCommandCreate?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobCreateCoraP2PDimmCommandPostWithHttpInfo(p2PCoraDimmCommandCreate: P2PCoraDimmCommandCreate?) : ApiResponse<P2PCoraDimmCommandCreate?> {
        val localVariableConfig = apiServicesAppP2PCoraJobCreateCoraP2PDimmCommandPostRequestConfig(p2PCoraDimmCommandCreate = p2PCoraDimmCommandCreate)

        return request<P2PCoraDimmCommandCreate, P2PCoraDimmCommandCreate>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobCreateCoraP2PDimmCommandPost
    *
    * @param p2PCoraDimmCommandCreate  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobCreateCoraP2PDimmCommandPostRequestConfig(p2PCoraDimmCommandCreate: P2PCoraDimmCommandCreate?) : RequestConfig<P2PCoraDimmCommandCreate> {
        val localVariableBody = p2PCoraDimmCommandCreate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/CreateCoraP2PDimmCommand",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobDeleteDelete(id: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobDeleteDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobDeleteDeleteWithHttpInfo(id: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobDeleteDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobDeleteDelete
    *
    * @param id  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobDeleteDeleteRequestConfig(id: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("id", listOf(id.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/services/app/P2PCoraJob/Delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2pJobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobFinishP2PJobWithMessagePost(p2pJobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobFinishP2PJobWithMessagePostWithHttpInfo(p2pJobId = p2pJobId, message = message, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2pJobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobFinishP2PJobWithMessagePostWithHttpInfo(p2pJobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobFinishP2PJobWithMessagePostRequestConfig(p2pJobId = p2pJobId, message = message, body = body)

        return request<kotlin.Int, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobFinishP2PJobWithMessagePost
    *
    * @param p2pJobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobFinishP2PJobWithMessagePostRequestConfig(p2pJobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (p2pJobId != null) {
                    put("p2pJobId", listOf(p2pJobId.toString()))
                }
                if (message != null) {
                    put("message", listOf(message.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/FinishP2PJobWithMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2pManagementJobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobFinishP2PManagementJobWithMessagePost(p2pManagementJobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobFinishP2PManagementJobWithMessagePostWithHttpInfo(p2pManagementJobId = p2pManagementJobId, message = message, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2pManagementJobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobFinishP2PManagementJobWithMessagePostWithHttpInfo(p2pManagementJobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobFinishP2PManagementJobWithMessagePostRequestConfig(p2pManagementJobId = p2pManagementJobId, message = message, body = body)

        return request<kotlin.Int, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobFinishP2PManagementJobWithMessagePost
    *
    * @param p2pManagementJobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobFinishP2PManagementJobWithMessagePostRequestConfig(p2pManagementJobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (p2pManagementJobId != null) {
                    put("p2pManagementJobId", listOf(p2pManagementJobId.toString()))
                }
                if (message != null) {
                    put("message", listOf(message.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/FinishP2PManagementJobWithMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2PCoraJobType  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return P2PCoraJobGetDtoPagedResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobGetAllGet(p2PCoraJobType: P2PCoraJobType?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : P2PCoraJobGetDtoPagedResultDto {
        val localVarResponse = apiServicesAppP2PCoraJobGetAllGetWithHttpInfo(p2PCoraJobType = p2PCoraJobType, skipCount = skipCount, maxResultCount = maxResultCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as P2PCoraJobGetDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2PCoraJobType  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return ApiResponse<P2PCoraJobGetDtoPagedResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobGetAllGetWithHttpInfo(p2PCoraJobType: P2PCoraJobType?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : ApiResponse<P2PCoraJobGetDtoPagedResultDto?> {
        val localVariableConfig = apiServicesAppP2PCoraJobGetAllGetRequestConfig(p2PCoraJobType = p2PCoraJobType, skipCount = skipCount, maxResultCount = maxResultCount)

        return request<Unit, P2PCoraJobGetDtoPagedResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobGetAllGet
    *
    * @param p2PCoraJobType  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobGetAllGetRequestConfig(p2PCoraJobType: P2PCoraJobType?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (p2PCoraJobType != null) {
                    put("P2PCoraJobType", listOf(p2PCoraJobType.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraJob/GetAll",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobGetCoraFirmwareAvailableUpdatesGet() : CoraFirmwareUpgradeAvailableVersionsDtoListResultDto {
        val localVarResponse = apiServicesAppP2PCoraJobGetCoraFirmwareAvailableUpdatesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraFirmwareUpgradeAvailableVersionsDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobGetCoraFirmwareAvailableUpdatesGetWithHttpInfo() : ApiResponse<CoraFirmwareUpgradeAvailableVersionsDtoListResultDto?> {
        val localVariableConfig = apiServicesAppP2PCoraJobGetCoraFirmwareAvailableUpdatesGetRequestConfig()

        return request<Unit, CoraFirmwareUpgradeAvailableVersionsDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobGetCoraFirmwareAvailableUpdatesGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobGetCoraFirmwareAvailableUpdatesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraJob/GetCoraFirmwareAvailableUpdates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<P2PCoraJobGetDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobGetP2PCoraJobBatchGet() : kotlin.collections.List<P2PCoraJobGetDto> {
        val localVarResponse = apiServicesAppP2PCoraJobGetP2PCoraJobBatchGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<P2PCoraJobGetDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<P2PCoraJobGetDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobGetP2PCoraJobBatchGetWithHttpInfo() : ApiResponse<kotlin.collections.List<P2PCoraJobGetDto>?> {
        val localVariableConfig = apiServicesAppP2PCoraJobGetP2PCoraJobBatchGetRequestConfig()

        return request<Unit, kotlin.collections.List<P2PCoraJobGetDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobGetP2PCoraJobBatchGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobGetP2PCoraJobBatchGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraJob/GetP2PCoraJobBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<P2PCoraManagementJobDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobGetP2PCoraManagementJobBatchGet() : kotlin.collections.List<P2PCoraManagementJobDto> {
        val localVarResponse = apiServicesAppP2PCoraJobGetP2PCoraManagementJobBatchGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<P2PCoraManagementJobDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<P2PCoraManagementJobDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobGetP2PCoraManagementJobBatchGetWithHttpInfo() : ApiResponse<kotlin.collections.List<P2PCoraManagementJobDto>?> {
        val localVariableConfig = apiServicesAppP2PCoraJobGetP2PCoraManagementJobBatchGetRequestConfig()

        return request<Unit, kotlin.collections.List<P2PCoraManagementJobDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobGetP2PCoraManagementJobBatchGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobGetP2PCoraManagementJobBatchGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraJob/GetP2PCoraManagementJobBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<P2PCoraJobGetDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobGetStuckP2PJobsGet() : kotlin.collections.List<P2PCoraJobGetDto> {
        val localVarResponse = apiServicesAppP2PCoraJobGetStuckP2PJobsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<P2PCoraJobGetDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<P2PCoraJobGetDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobGetStuckP2PJobsGetWithHttpInfo() : ApiResponse<kotlin.collections.List<P2PCoraJobGetDto>?> {
        val localVariableConfig = apiServicesAppP2PCoraJobGetStuckP2PJobsGetRequestConfig()

        return request<Unit, kotlin.collections.List<P2PCoraJobGetDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobGetStuckP2PJobsGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobGetStuckP2PJobsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraJob/GetStuckP2PJobs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<P2PCoraManagementJobDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobGetStuckP2PManagementJobsGet() : kotlin.collections.List<P2PCoraManagementJobDto> {
        val localVarResponse = apiServicesAppP2PCoraJobGetStuckP2PManagementJobsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<P2PCoraManagementJobDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<P2PCoraManagementJobDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobGetStuckP2PManagementJobsGetWithHttpInfo() : ApiResponse<kotlin.collections.List<P2PCoraManagementJobDto>?> {
        val localVariableConfig = apiServicesAppP2PCoraJobGetStuckP2PManagementJobsGetRequestConfig()

        return request<Unit, kotlin.collections.List<P2PCoraManagementJobDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobGetStuckP2PManagementJobsGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobGetStuckP2PManagementJobsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraJob/GetStuckP2PManagementJobs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2PSequenceProgramDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobP2PSequenceProgramPost(p2PSequenceProgramDto: P2PSequenceProgramDto?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobP2PSequenceProgramPostWithHttpInfo(p2PSequenceProgramDto = p2PSequenceProgramDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2PSequenceProgramDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobP2PSequenceProgramPostWithHttpInfo(p2PSequenceProgramDto: P2PSequenceProgramDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobP2PSequenceProgramPostRequestConfig(p2PSequenceProgramDto = p2PSequenceProgramDto)

        return request<P2PSequenceProgramDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobP2PSequenceProgramPost
    *
    * @param p2PSequenceProgramDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobP2PSequenceProgramPostRequestConfig(p2PSequenceProgramDto: P2PSequenceProgramDto?) : RequestConfig<P2PSequenceProgramDto> {
        val localVariableBody = p2PSequenceProgramDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/P2PSequenceProgram",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraJobId  (optional)
    * @param coraIdStr  (optional)
    * @param plsNumber  (optional)
    * @param body  (optional)
    * @return P2PCoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobP2PUpdateJobStatusPost(coraJobId: kotlin.Int?, coraIdStr: kotlin.String?, plsNumber: kotlin.Int?, body: kotlin.Int?) : P2PCoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppP2PCoraJobP2PUpdateJobStatusPostWithHttpInfo(coraJobId = coraJobId, coraIdStr = coraIdStr, plsNumber = plsNumber, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as P2PCoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraJobId  (optional)
    * @param coraIdStr  (optional)
    * @param plsNumber  (optional)
    * @param body  (optional)
    * @return ApiResponse<P2PCoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobP2PUpdateJobStatusPostWithHttpInfo(coraJobId: kotlin.Int?, coraIdStr: kotlin.String?, plsNumber: kotlin.Int?, body: kotlin.Int?) : ApiResponse<P2PCoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppP2PCoraJobP2PUpdateJobStatusPostRequestConfig(coraJobId = coraJobId, coraIdStr = coraIdStr, plsNumber = plsNumber, body = body)

        return request<kotlin.Int, P2PCoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobP2PUpdateJobStatusPost
    *
    * @param coraJobId  (optional)
    * @param coraIdStr  (optional)
    * @param plsNumber  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobP2PUpdateJobStatusPostRequestConfig(coraJobId: kotlin.Int?, coraIdStr: kotlin.String?, plsNumber: kotlin.Int?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraJobId != null) {
                    put("coraJobId", listOf(coraJobId.toString()))
                }
                if (coraIdStr != null) {
                    put("coraIdStr", listOf(coraIdStr.toString()))
                }
                if (plsNumber != null) {
                    put("PlsNumber", listOf(plsNumber.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/P2PUpdateJobStatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraJobId  (optional)
    * @param coraIdStr  (optional)
    * @param body  (optional)
    * @return P2PCoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobP2PUpdateManagementJobStatusPost(coraJobId: kotlin.Int?, coraIdStr: kotlin.String?, body: kotlin.Int?) : P2PCoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppP2PCoraJobP2PUpdateManagementJobStatusPostWithHttpInfo(coraJobId = coraJobId, coraIdStr = coraIdStr, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as P2PCoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraJobId  (optional)
    * @param coraIdStr  (optional)
    * @param body  (optional)
    * @return ApiResponse<P2PCoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobP2PUpdateManagementJobStatusPostWithHttpInfo(coraJobId: kotlin.Int?, coraIdStr: kotlin.String?, body: kotlin.Int?) : ApiResponse<P2PCoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppP2PCoraJobP2PUpdateManagementJobStatusPostRequestConfig(coraJobId = coraJobId, coraIdStr = coraIdStr, body = body)

        return request<kotlin.Int, P2PCoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobP2PUpdateManagementJobStatusPost
    *
    * @param coraJobId  (optional)
    * @param coraIdStr  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobP2PUpdateManagementJobStatusPostRequestConfig(coraJobId: kotlin.Int?, coraIdStr: kotlin.String?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraJobId != null) {
                    put("coraJobId", listOf(coraJobId.toString()))
                }
                if (coraIdStr != null) {
                    put("coraIdStr", listOf(coraIdStr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/P2PUpdateManagementJobStatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2pCoraId  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobResetP2PCoraPost(p2pCoraId: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobResetP2PCoraPostWithHttpInfo(p2pCoraId = p2pCoraId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2pCoraId  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobResetP2PCoraPostWithHttpInfo(p2pCoraId: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobResetP2PCoraPostRequestConfig(p2pCoraId = p2pCoraId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobResetP2PCoraPost
    *
    * @param p2pCoraId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobResetP2PCoraPostRequestConfig(p2pCoraId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (p2pCoraId != null) {
                    put("p2pCoraId", listOf(p2pCoraId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/ResetP2PCora",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobRetryP2PCoraJobPost(jobId: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobRetryP2PCoraJobPostWithHttpInfo(jobId = jobId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobRetryP2PCoraJobPostWithHttpInfo(jobId: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobRetryP2PCoraJobPostRequestConfig(jobId = jobId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobRetryP2PCoraJobPost
    *
    * @param jobId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobRetryP2PCoraJobPostRequestConfig(jobId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (jobId != null) {
                    put("jobId", listOf(jobId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/RetryP2PCoraJob",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2pManagementJobId  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobRetryP2PCoraManagementJobPost(p2pManagementJobId: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobRetryP2PCoraManagementJobPostWithHttpInfo(p2pManagementJobId = p2pManagementJobId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2pManagementJobId  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobRetryP2PCoraManagementJobPostWithHttpInfo(p2pManagementJobId: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobRetryP2PCoraManagementJobPostRequestConfig(p2pManagementJobId = p2pManagementJobId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobRetryP2PCoraManagementJobPost
    *
    * @param p2pManagementJobId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobRetryP2PCoraManagementJobPostRequestConfig(p2pManagementJobId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (p2pManagementJobId != null) {
                    put("p2pManagementJobId", listOf(p2pManagementJobId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/RetryP2PCoraManagementJob",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param p2PCoraFirmwareUpdateJobDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraJobUpgradeP2PCoraFirmwarePost(p2PCoraFirmwareUpdateJobDto: P2PCoraFirmwareUpdateJobDto?) : Unit {
        val localVarResponse = apiServicesAppP2PCoraJobUpgradeP2PCoraFirmwarePostWithHttpInfo(p2PCoraFirmwareUpdateJobDto = p2PCoraFirmwareUpdateJobDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param p2PCoraFirmwareUpdateJobDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraJobUpgradeP2PCoraFirmwarePostWithHttpInfo(p2PCoraFirmwareUpdateJobDto: P2PCoraFirmwareUpdateJobDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppP2PCoraJobUpgradeP2PCoraFirmwarePostRequestConfig(p2PCoraFirmwareUpdateJobDto = p2PCoraFirmwareUpdateJobDto)

        return request<P2PCoraFirmwareUpdateJobDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraJobUpgradeP2PCoraFirmwarePost
    *
    * @param p2PCoraFirmwareUpdateJobDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraJobUpgradeP2PCoraFirmwarePostRequestConfig(p2PCoraFirmwareUpdateJobDto: P2PCoraFirmwareUpdateJobDto?) : RequestConfig<P2PCoraFirmwareUpdateJobDto> {
        val localVariableBody = p2PCoraFirmwareUpdateJobDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/P2PCoraJob/UpgradeP2PCoraFirmware",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
