/**
 * PriluxWebUI API
 *
 * PriluxWebUI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.CanCoraConnectDto
import org.openapitools.client.models.CoraActivateInPlatformDto
import org.openapitools.client.models.CoraAlertDashboardDto
import org.openapitools.client.models.CoraAlertListDtoListResultDto
import org.openapitools.client.models.CoraBoolErrorResponseDto
import org.openapitools.client.models.CoraBoolResponseDto
import org.openapitools.client.models.CoraDefaultSequenceDataDtoListResultDto
import org.openapitools.client.models.CoraExtraDataDto
import org.openapitools.client.models.CoraFilter
import org.openapitools.client.models.CoraImportCheckErrorDtoListResultDto
import org.openapitools.client.models.CoraJobDtoListResultDto
import org.openapitools.client.models.CoraListDto
import org.openapitools.client.models.CoraListDtoListResultDto
import org.openapitools.client.models.CoraListDtoPagedResultDto
import org.openapitools.client.models.CoraSequenceDto
import org.openapitools.client.models.CoraSequenceJobInputDto
import org.openapitools.client.models.CoraStateDto
import org.openapitools.client.models.CoraTypeDto
import org.openapitools.client.models.CoraTypeUpdateDto
import org.openapitools.client.models.CoraUpdateDescriptionDto
import org.openapitools.client.models.CoraVersionsListDtoPagedResultDto
import org.openapitools.client.models.DashboardCoraOverviewDto
import org.openapitools.client.models.MarkAlertAsSeenInputDto
import org.openapitools.client.models.ReplaceCoraDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CoraApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param coraActivateInPlatformDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraActivateCoraDevicePost(coraActivateInPlatformDto: CoraActivateInPlatformDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraActivateCoraDevicePostWithHttpInfo(coraActivateInPlatformDto = coraActivateInPlatformDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraActivateInPlatformDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraActivateCoraDevicePostWithHttpInfo(coraActivateInPlatformDto: CoraActivateInPlatformDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraActivateCoraDevicePostRequestConfig(coraActivateInPlatformDto = coraActivateInPlatformDto)

        return request<CoraActivateInPlatformDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraActivateCoraDevicePost
    *
    * @param coraActivateInPlatformDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraActivateCoraDevicePostRequestConfig(coraActivateInPlatformDto: CoraActivateInPlatformDto?) : RequestConfig<CoraActivateInPlatformDto> {
        val localVariableBody = coraActivateInPlatformDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/ActivateCoraDevice",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraListDto  (optional)
    * @return CoraBoolResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAddCoraDevicePost(coraListDto: CoraListDto?) : CoraBoolResponseDto {
        val localVarResponse = apiServicesAppCoraAddCoraDevicePostWithHttpInfo(coraListDto = coraListDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraListDto  (optional)
    * @return ApiResponse<CoraBoolResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAddCoraDevicePostWithHttpInfo(coraListDto: CoraListDto?) : ApiResponse<CoraBoolResponseDto?> {
        val localVariableConfig = apiServicesAppCoraAddCoraDevicePostRequestConfig(coraListDto = coraListDto)

        return request<CoraListDto, CoraBoolResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAddCoraDevicePost
    *
    * @param coraListDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAddCoraDevicePostRequestConfig(coraListDto: CoraListDto?) : RequestConfig<CoraListDto> {
        val localVariableBody = coraListDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/AddCoraDevice",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraSequenceDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAddSequencePost(coraSequenceDto: CoraSequenceDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraAddSequencePostWithHttpInfo(coraSequenceDto = coraSequenceDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraSequenceDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAddSequencePostWithHttpInfo(coraSequenceDto: CoraSequenceDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraAddSequencePostRequestConfig(coraSequenceDto = coraSequenceDto)

        return request<CoraSequenceDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAddSequencePost
    *
    * @param coraSequenceDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAddSequencePostRequestConfig(coraSequenceDto: CoraSequenceDto?) : RequestConfig<CoraSequenceDto> {
        val localVariableBody = coraSequenceDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/AddSequence",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraSequenceJobInputDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAddSequenceProgramJobPost(coraSequenceJobInputDto: CoraSequenceJobInputDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraAddSequenceProgramJobPostWithHttpInfo(coraSequenceJobInputDto = coraSequenceJobInputDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraSequenceJobInputDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAddSequenceProgramJobPostWithHttpInfo(coraSequenceJobInputDto: CoraSequenceJobInputDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraAddSequenceProgramJobPostRequestConfig(coraSequenceJobInputDto = coraSequenceJobInputDto)

        return request<CoraSequenceJobInputDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAddSequenceProgramJobPost
    *
    * @param coraSequenceJobInputDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAddSequenceProgramJobPostRequestConfig(coraSequenceJobInputDto: CoraSequenceJobInputDto?) : RequestConfig<CoraSequenceJobInputDto> {
        val localVariableBody = coraSequenceJobInputDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/AddSequenceProgramJob",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @return CanCoraConnectDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraCanCoraConnectMqttPost(coraIdStr: kotlin.String?) : CanCoraConnectDto {
        val localVarResponse = apiServicesAppCoraCanCoraConnectMqttPostWithHttpInfo(coraIdStr = coraIdStr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CanCoraConnectDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @return ApiResponse<CanCoraConnectDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraCanCoraConnectMqttPostWithHttpInfo(coraIdStr: kotlin.String?) : ApiResponse<CanCoraConnectDto?> {
        val localVariableConfig = apiServicesAppCoraCanCoraConnectMqttPostRequestConfig(coraIdStr = coraIdStr)

        return request<Unit, CanCoraConnectDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraCanCoraConnectMqttPost
    *
    * @param coraIdStr  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraCanCoraConnectMqttPostRequestConfig(coraIdStr: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/CanCoraConnectMqtt",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraListDto  (optional)
    * @return CoraListDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraCreatePost(coraListDto: CoraListDto?) : CoraListDto {
        val localVarResponse = apiServicesAppCoraCreatePostWithHttpInfo(coraListDto = coraListDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraListDto  (optional)
    * @return ApiResponse<CoraListDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraCreatePostWithHttpInfo(coraListDto: CoraListDto?) : ApiResponse<CoraListDto?> {
        val localVariableConfig = apiServicesAppCoraCreatePostRequestConfig(coraListDto = coraListDto)

        return request<CoraListDto, CoraListDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraCreatePost
    *
    * @param coraListDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraCreatePostRequestConfig(coraListDto: CoraListDto?) : RequestConfig<CoraListDto> {
        val localVariableBody = coraListDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/Create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraDeleteCoraDevicebyIdDelete(id: kotlin.Int?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraDeleteCoraDevicebyIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraDeleteCoraDevicebyIdDeleteWithHttpInfo(id: kotlin.Int?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraDeleteCoraDevicebyIdDeleteRequestConfig(id = id)

        return request<Unit, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraDeleteCoraDevicebyIdDelete
    *
    * @param id  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraDeleteCoraDevicebyIdDeleteRequestConfig(id: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("Id", listOf(id.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/services/app/Cora/DeleteCoraDevicebyId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraDeleteDelete(id: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppCoraDeleteDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraDeleteDeleteWithHttpInfo(id: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppCoraDeleteDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraDeleteDelete
    *
    * @param id  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraDeleteDeleteRequestConfig(id: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("Id", listOf(id.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/services/app/Cora/Delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param date  
    * @return CoraListDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetActiveCorasOnDateGet(date: java.time.OffsetDateTime) : CoraListDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetActiveCorasOnDateGetWithHttpInfo(date = date)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param date  
    * @return ApiResponse<CoraListDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetActiveCorasOnDateGetWithHttpInfo(date: java.time.OffsetDateTime) : ApiResponse<CoraListDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetActiveCorasOnDateGetRequestConfig(date = date)

        return request<Unit, CoraListDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetActiveCorasOnDateGet
    *
    * @param date  
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetActiveCorasOnDateGetRequestConfig(date: java.time.OffsetDateTime) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("Date", listOf(parseDateToQueryString(date)))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetActiveCorasOnDate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraAlertDashboardDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetAlertOverviewGet() : CoraAlertDashboardDto {
        val localVarResponse = apiServicesAppCoraGetAlertOverviewGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraAlertDashboardDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraAlertDashboardDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetAlertOverviewGetWithHttpInfo() : ApiResponse<CoraAlertDashboardDto?> {
        val localVariableConfig = apiServicesAppCoraGetAlertOverviewGetRequestConfig()

        return request<Unit, CoraAlertDashboardDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetAlertOverviewGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetAlertOverviewGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetAlertOverview",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraAlertListDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetAllActiveAlertsGet() : CoraAlertListDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetAllActiveAlertsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraAlertListDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraAlertListDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetAllActiveAlertsGetWithHttpInfo() : ApiResponse<CoraAlertListDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetAllActiveAlertsGetRequestConfig()

        return request<Unit, CoraAlertListDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetAllActiveAlertsGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetAllActiveAlertsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetAllActiveAlerts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraAlertListDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetAllArchivedAlertsGet() : CoraAlertListDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetAllArchivedAlertsGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraAlertListDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraAlertListDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetAllArchivedAlertsGetWithHttpInfo() : ApiResponse<CoraAlertListDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetAllArchivedAlertsGetRequestConfig()

        return request<Unit, CoraAlertListDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetAllArchivedAlertsGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetAllArchivedAlertsGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetAllArchivedAlerts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return CoraListDtoPagedResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetAllGet(keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : CoraListDtoPagedResultDto {
        val localVarResponse = apiServicesAppCoraGetAllGetWithHttpInfo(keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return ApiResponse<CoraListDtoPagedResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetAllGetWithHttpInfo(keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : ApiResponse<CoraListDtoPagedResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetAllGetRequestConfig(keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return request<Unit, CoraListDtoPagedResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetAllGet
    *
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetAllGetRequestConfig(keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keyword != null) {
                    put("Keyword", listOf(keyword.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetAll",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return CoraListDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCloudCorasFilteredGet(keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : CoraListDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetCloudCorasFilteredGetWithHttpInfo(keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return ApiResponse<CoraListDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCloudCorasFilteredGetWithHttpInfo(keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : ApiResponse<CoraListDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetCloudCorasFilteredGetRequestConfig(keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return request<Unit, CoraListDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCloudCorasFilteredGet
    *
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCloudCorasFilteredGetRequestConfig(keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keyword != null) {
                    put("Keyword", listOf(keyword.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCloudCorasFiltered",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraListDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCloudCorasGet() : CoraListDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetCloudCorasGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraListDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCloudCorasGetWithHttpInfo() : ApiResponse<CoraListDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetCloudCorasGetRequestConfig()

        return request<Unit, CoraListDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCloudCorasGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCloudCorasGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCloudCoras",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraId  (optional)
    * @return CoraExtraDataDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCoraExtraDataGet(coraId: kotlin.Int?) : CoraExtraDataDto {
        val localVarResponse = apiServicesAppCoraGetCoraExtraDataGetWithHttpInfo(coraId = coraId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraExtraDataDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraId  (optional)
    * @return ApiResponse<CoraExtraDataDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCoraExtraDataGetWithHttpInfo(coraId: kotlin.Int?) : ApiResponse<CoraExtraDataDto?> {
        val localVariableConfig = apiServicesAppCoraGetCoraExtraDataGetRequestConfig(coraId = coraId)

        return request<Unit, CoraExtraDataDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCoraExtraDataGet
    *
    * @param coraId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCoraExtraDataGetRequestConfig(coraId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraId != null) {
                    put("CoraId", listOf(coraId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCoraExtraData",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @return CoraListDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCoraGet(coraIdStr: kotlin.String?) : CoraListDto {
        val localVarResponse = apiServicesAppCoraGetCoraGetWithHttpInfo(coraIdStr = coraIdStr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @return ApiResponse<CoraListDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCoraGetWithHttpInfo(coraIdStr: kotlin.String?) : ApiResponse<CoraListDto?> {
        val localVariableConfig = apiServicesAppCoraGetCoraGetRequestConfig(coraIdStr = coraIdStr)

        return request<Unit, CoraListDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCoraGet
    *
    * @param coraIdStr  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCoraGetRequestConfig(coraIdStr: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCora",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<CoraStateDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCoraStatesGet() : kotlin.collections.List<CoraStateDto> {
        val localVarResponse = apiServicesAppCoraGetCoraStatesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CoraStateDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<CoraStateDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCoraStatesGetWithHttpInfo() : ApiResponse<kotlin.collections.List<CoraStateDto>?> {
        val localVariableConfig = apiServicesAppCoraGetCoraStatesGetRequestConfig()

        return request<Unit, kotlin.collections.List<CoraStateDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCoraStatesGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCoraStatesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCoraStates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<CoraTypeDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCoraTypesGet() : kotlin.collections.List<CoraTypeDto> {
        val localVarResponse = apiServicesAppCoraGetCoraTypesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CoraTypeDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<CoraTypeDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCoraTypesGetWithHttpInfo() : ApiResponse<kotlin.collections.List<CoraTypeDto>?> {
        val localVariableConfig = apiServicesAppCoraGetCoraTypesGetRequestConfig()

        return request<Unit, kotlin.collections.List<CoraTypeDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCoraTypesGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCoraTypesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCoraTypes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param filter  (optional)
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return CoraListDtoPagedResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCorasFilteredGet(filter: CoraFilter?, keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : CoraListDtoPagedResultDto {
        val localVarResponse = apiServicesAppCoraGetCorasFilteredGetWithHttpInfo(filter = filter, keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param filter  (optional)
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return ApiResponse<CoraListDtoPagedResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCorasFilteredGetWithHttpInfo(filter: CoraFilter?, keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : ApiResponse<CoraListDtoPagedResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetCorasFilteredGetRequestConfig(filter = filter, keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return request<Unit, CoraListDtoPagedResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCorasFilteredGet
    *
    * @param filter  (optional)
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCorasFilteredGetRequestConfig(filter: CoraFilter?, keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("Filter", listOf(filter.toString()))
                }
                if (keyword != null) {
                    put("Keyword", listOf(keyword.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCorasFiltered",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param filter  (optional)
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return CoraVersionsListDtoPagedResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCorasFilteredWithVersionsGet(filter: CoraFilter?, keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : CoraVersionsListDtoPagedResultDto {
        val localVarResponse = apiServicesAppCoraGetCorasFilteredWithVersionsGetWithHttpInfo(filter = filter, keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraVersionsListDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param filter  (optional)
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return ApiResponse<CoraVersionsListDtoPagedResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCorasFilteredWithVersionsGetWithHttpInfo(filter: CoraFilter?, keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : ApiResponse<CoraVersionsListDtoPagedResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetCorasFilteredWithVersionsGetRequestConfig(filter = filter, keyword = keyword, skipCount = skipCount, maxResultCount = maxResultCount)

        return request<Unit, CoraVersionsListDtoPagedResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCorasFilteredWithVersionsGet
    *
    * @param filter  (optional)
    * @param keyword  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCorasFilteredWithVersionsGetRequestConfig(filter: CoraFilter?, keyword: kotlin.String?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (filter != null) {
                    put("Filter", listOf(filter.toString()))
                }
                if (keyword != null) {
                    put("Keyword", listOf(keyword.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCorasFilteredWithVersions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraListDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetCorastoRequestAnalizerDataGet() : CoraListDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetCorastoRequestAnalizerDataGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraListDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetCorastoRequestAnalizerDataGetWithHttpInfo() : ApiResponse<CoraListDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetCorastoRequestAnalizerDataGetRequestConfig()

        return request<Unit, CoraListDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetCorastoRequestAnalizerDataGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetCorastoRequestAnalizerDataGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetCorastoRequestAnalizerData",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return DashboardCoraOverviewDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetDashboardCoraOverviewGet() : DashboardCoraOverviewDto {
        val localVarResponse = apiServicesAppCoraGetDashboardCoraOverviewGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DashboardCoraOverviewDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<DashboardCoraOverviewDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetDashboardCoraOverviewGetWithHttpInfo() : ApiResponse<DashboardCoraOverviewDto?> {
        val localVariableConfig = apiServicesAppCoraGetDashboardCoraOverviewGetRequestConfig()

        return request<Unit, DashboardCoraOverviewDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetDashboardCoraOverviewGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetDashboardCoraOverviewGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetDashboardCoraOverview",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraDefaultSequenceDataDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetDefaultSequenceDataGet() : CoraDefaultSequenceDataDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetDefaultSequenceDataGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraDefaultSequenceDataDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraDefaultSequenceDataDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetDefaultSequenceDataGetWithHttpInfo() : ApiResponse<CoraDefaultSequenceDataDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetDefaultSequenceDataGetRequestConfig()

        return request<Unit, CoraDefaultSequenceDataDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetDefaultSequenceDataGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetDefaultSequenceDataGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetDefaultSequenceData",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return CoraListDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetGet(id: kotlin.Int?) : CoraListDto {
        val localVarResponse = apiServicesAppCoraGetGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return ApiResponse<CoraListDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetGetWithHttpInfo(id: kotlin.Int?) : ApiResponse<CoraListDto?> {
        val localVariableConfig = apiServicesAppCoraGetGetRequestConfig(id = id)

        return request<Unit, CoraListDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetGet
    *
    * @param id  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetGetRequestConfig(id: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("Id", listOf(id.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/Get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraJobDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetRunableCoraJobsBatchGet() : CoraJobDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetRunableCoraJobsBatchGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraJobDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraJobDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetRunableCoraJobsBatchGetWithHttpInfo() : ApiResponse<CoraJobDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetRunableCoraJobsBatchGetRequestConfig()

        return request<Unit, CoraJobDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetRunableCoraJobsBatchGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetRunableCoraJobsBatchGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetRunableCoraJobsBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraJobDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraGetStuckCoraJobsBatchGet() : CoraJobDtoListResultDto {
        val localVarResponse = apiServicesAppCoraGetStuckCoraJobsBatchGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraJobDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraJobDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraGetStuckCoraJobsBatchGetWithHttpInfo() : ApiResponse<CoraJobDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraGetStuckCoraJobsBatchGetRequestConfig()

        return request<Unit, CoraJobDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraGetStuckCoraJobsBatchGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraGetStuckCoraJobsBatchGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/Cora/GetStuckCoraJobsBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param requestBody  (optional)
    * @return CoraImportCheckErrorDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraImportCheckCoraDescriptionsPost(requestBody: kotlin.collections.List<kotlin.String>?) : CoraImportCheckErrorDtoListResultDto {
        val localVarResponse = apiServicesAppCoraImportCheckCoraDescriptionsPostWithHttpInfo(requestBody = requestBody)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraImportCheckErrorDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param requestBody  (optional)
    * @return ApiResponse<CoraImportCheckErrorDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraImportCheckCoraDescriptionsPostWithHttpInfo(requestBody: kotlin.collections.List<kotlin.String>?) : ApiResponse<CoraImportCheckErrorDtoListResultDto?> {
        val localVariableConfig = apiServicesAppCoraImportCheckCoraDescriptionsPostRequestConfig(requestBody = requestBody)

        return request<kotlin.collections.List<kotlin.String>, CoraImportCheckErrorDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraImportCheckCoraDescriptionsPost
    *
    * @param requestBody  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraImportCheckCoraDescriptionsPostRequestConfig(requestBody: kotlin.collections.List<kotlin.String>?) : RequestConfig<kotlin.collections.List<kotlin.String>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/ImportCheckCoraDescriptions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param alertId  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraMarkAlertAsArchivedPost(alertId: kotlin.Int?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraMarkAlertAsArchivedPostWithHttpInfo(alertId = alertId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param alertId  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraMarkAlertAsArchivedPostWithHttpInfo(alertId: kotlin.Int?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraMarkAlertAsArchivedPostRequestConfig(alertId = alertId)

        return request<Unit, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraMarkAlertAsArchivedPost
    *
    * @param alertId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraMarkAlertAsArchivedPostRequestConfig(alertId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (alertId != null) {
                    put("AlertId", listOf(alertId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/MarkAlertAsArchived",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param alertId  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraMarkAlertAsClosedPost(alertId: kotlin.Int?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraMarkAlertAsClosedPostWithHttpInfo(alertId = alertId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param alertId  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraMarkAlertAsClosedPostWithHttpInfo(alertId: kotlin.Int?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraMarkAlertAsClosedPostRequestConfig(alertId = alertId)

        return request<Unit, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraMarkAlertAsClosedPost
    *
    * @param alertId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraMarkAlertAsClosedPostRequestConfig(alertId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (alertId != null) {
                    put("AlertId", listOf(alertId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/MarkAlertAsClosed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param alertId  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraMarkAlertAsNewPost(alertId: kotlin.Int?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraMarkAlertAsNewPostWithHttpInfo(alertId = alertId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param alertId  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraMarkAlertAsNewPostWithHttpInfo(alertId: kotlin.Int?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraMarkAlertAsNewPostRequestConfig(alertId = alertId)

        return request<Unit, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraMarkAlertAsNewPost
    *
    * @param alertId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraMarkAlertAsNewPostRequestConfig(alertId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (alertId != null) {
                    put("AlertId", listOf(alertId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/MarkAlertAsNew",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param markAlertAsSeenInputDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraMarkAlertAsSeenPost(markAlertAsSeenInputDto: MarkAlertAsSeenInputDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraMarkAlertAsSeenPostWithHttpInfo(markAlertAsSeenInputDto = markAlertAsSeenInputDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param markAlertAsSeenInputDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraMarkAlertAsSeenPostWithHttpInfo(markAlertAsSeenInputDto: MarkAlertAsSeenInputDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraMarkAlertAsSeenPostRequestConfig(markAlertAsSeenInputDto = markAlertAsSeenInputDto)

        return request<MarkAlertAsSeenInputDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraMarkAlertAsSeenPost
    *
    * @param markAlertAsSeenInputDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraMarkAlertAsSeenPostRequestConfig(markAlertAsSeenInputDto: MarkAlertAsSeenInputDto?) : RequestConfig<MarkAlertAsSeenInputDto> {
        val localVariableBody = markAlertAsSeenInputDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/MarkAlertAsSeen",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @return CoraBoolResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraRemoveCoraDeviceDelete(coraIdStr: kotlin.String?) : CoraBoolResponseDto {
        val localVarResponse = apiServicesAppCoraRemoveCoraDeviceDeleteWithHttpInfo(coraIdStr = coraIdStr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @return ApiResponse<CoraBoolResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraRemoveCoraDeviceDeleteWithHttpInfo(coraIdStr: kotlin.String?) : ApiResponse<CoraBoolResponseDto?> {
        val localVariableConfig = apiServicesAppCoraRemoveCoraDeviceDeleteRequestConfig(coraIdStr = coraIdStr)

        return request<Unit, CoraBoolResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraRemoveCoraDeviceDelete
    *
    * @param coraIdStr  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraRemoveCoraDeviceDeleteRequestConfig(coraIdStr: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/services/app/Cora/RemoveCoraDevice",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param replaceCoraDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraReplaceCoraPost(replaceCoraDto: ReplaceCoraDto?) : Unit {
        val localVarResponse = apiServicesAppCoraReplaceCoraPostWithHttpInfo(replaceCoraDto = replaceCoraDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param replaceCoraDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraReplaceCoraPostWithHttpInfo(replaceCoraDto: ReplaceCoraDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppCoraReplaceCoraPostRequestConfig(replaceCoraDto = replaceCoraDto)

        return request<ReplaceCoraDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraReplaceCoraPost
    *
    * @param replaceCoraDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraReplaceCoraPostRequestConfig(replaceCoraDto: ReplaceCoraDto?) : RequestConfig<ReplaceCoraDto> {
        val localVariableBody = replaceCoraDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/ReplaceCora",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraExtraDataDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraSaveCoraExtraDataPost(coraExtraDataDto: CoraExtraDataDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraSaveCoraExtraDataPostWithHttpInfo(coraExtraDataDto = coraExtraDataDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraExtraDataDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraSaveCoraExtraDataPostWithHttpInfo(coraExtraDataDto: CoraExtraDataDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraSaveCoraExtraDataPostRequestConfig(coraExtraDataDto = coraExtraDataDto)

        return request<CoraExtraDataDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraSaveCoraExtraDataPost
    *
    * @param coraExtraDataDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraSaveCoraExtraDataPostRequestConfig(coraExtraDataDto: CoraExtraDataDto?) : RequestConfig<CoraExtraDataDto> {
        val localVariableBody = coraExtraDataDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/Cora/SaveCoraExtraData",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraUpdateDescriptionDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraUpdateCoraDescriptionPut(coraUpdateDescriptionDto: CoraUpdateDescriptionDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppCoraUpdateCoraDescriptionPutWithHttpInfo(coraUpdateDescriptionDto = coraUpdateDescriptionDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraUpdateDescriptionDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraUpdateCoraDescriptionPutWithHttpInfo(coraUpdateDescriptionDto: CoraUpdateDescriptionDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppCoraUpdateCoraDescriptionPutRequestConfig(coraUpdateDescriptionDto = coraUpdateDescriptionDto)

        return request<CoraUpdateDescriptionDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraUpdateCoraDescriptionPut
    *
    * @param coraUpdateDescriptionDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraUpdateCoraDescriptionPutRequestConfig(coraUpdateDescriptionDto: CoraUpdateDescriptionDto?) : RequestConfig<CoraUpdateDescriptionDto> {
        val localVariableBody = coraUpdateDescriptionDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/services/app/Cora/UpdateCoraDescription",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraTypeUpdateDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraUpdateCoraTypePut(coraTypeUpdateDto: CoraTypeUpdateDto?) : Unit {
        val localVarResponse = apiServicesAppCoraUpdateCoraTypePutWithHttpInfo(coraTypeUpdateDto = coraTypeUpdateDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraTypeUpdateDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraUpdateCoraTypePutWithHttpInfo(coraTypeUpdateDto: CoraTypeUpdateDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppCoraUpdateCoraTypePutRequestConfig(coraTypeUpdateDto = coraTypeUpdateDto)

        return request<CoraTypeUpdateDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraUpdateCoraTypePut
    *
    * @param coraTypeUpdateDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraUpdateCoraTypePutRequestConfig(coraTypeUpdateDto: CoraTypeUpdateDto?) : RequestConfig<CoraTypeUpdateDto> {
        val localVariableBody = coraTypeUpdateDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/services/app/Cora/UpdateCoraType",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraListDto  (optional)
    * @return CoraListDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraUpdatePut(coraListDto: CoraListDto?) : CoraListDto {
        val localVarResponse = apiServicesAppCoraUpdatePutWithHttpInfo(coraListDto = coraListDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraListDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraListDto  (optional)
    * @return ApiResponse<CoraListDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraUpdatePutWithHttpInfo(coraListDto: CoraListDto?) : ApiResponse<CoraListDto?> {
        val localVariableConfig = apiServicesAppCoraUpdatePutRequestConfig(coraListDto = coraListDto)

        return request<CoraListDto, CoraListDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraUpdatePut
    *
    * @param coraListDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraUpdatePutRequestConfig(coraListDto: CoraListDto?) : RequestConfig<CoraListDto> {
        val localVariableBody = coraListDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/services/app/Cora/Update",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
