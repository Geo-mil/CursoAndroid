/**
 * PriluxWebUI API
 *
 * PriluxWebUI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.AnalizerDataDto
import org.openapitools.client.models.AnalizerDataReadDto
import org.openapitools.client.models.CoraBoolResponseDto
import org.openapitools.client.models.DataGroupMode
import org.openapitools.client.models.NodeMetricRequestType
import org.openapitools.client.models.VictoriaMetricsInstantQueryStdResponse
import org.openapitools.client.models.VictoriaMetricsSTDMetricRawResponse
import org.openapitools.client.models.VictoriaMetricsSTDMetricResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CoraAnalizerDataServiceApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param startDate  (optional)
    * @param endDate  (optional)
    * @param coraId  (optional)
    * @return kotlin.collections.List<AnalizerDataReadDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraBetweenDatesGet(startDate: java.time.OffsetDateTime?, endDate: java.time.OffsetDateTime?, coraId: kotlin.Int?) : kotlin.collections.List<AnalizerDataReadDto> {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraBetweenDatesGetWithHttpInfo(startDate = startDate, endDate = endDate, coraId = coraId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<AnalizerDataReadDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param startDate  (optional)
    * @param endDate  (optional)
    * @param coraId  (optional)
    * @return ApiResponse<kotlin.collections.List<AnalizerDataReadDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraBetweenDatesGetWithHttpInfo(startDate: java.time.OffsetDateTime?, endDate: java.time.OffsetDateTime?, coraId: kotlin.Int?) : ApiResponse<kotlin.collections.List<AnalizerDataReadDto>?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraBetweenDatesGetRequestConfig(startDate = startDate, endDate = endDate, coraId = coraId)

        return request<Unit, kotlin.collections.List<AnalizerDataReadDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraBetweenDatesGet
    *
    * @param startDate  (optional)
    * @param endDate  (optional)
    * @param coraId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraBetweenDatesGetRequestConfig(startDate: java.time.OffsetDateTime?, endDate: java.time.OffsetDateTime?, coraId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("startDate", listOf(parseDateToQueryString(startDate)))
                }
                if (endDate != null) {
                    put("endDate", listOf(parseDateToQueryString(endDate)))
                }
                if (coraId != null) {
                    put("coraId", listOf(coraId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetAnalizerDataforCoraBetweenDates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param numHoursBack  (optional)
    * @param coraId  (optional)
    * @return kotlin.collections.List<AnalizerDataReadDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraGet(numHoursBack: kotlin.Int?, coraId: kotlin.Int?) : kotlin.collections.List<AnalizerDataReadDto> {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraGetWithHttpInfo(numHoursBack = numHoursBack, coraId = coraId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<AnalizerDataReadDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param numHoursBack  (optional)
    * @param coraId  (optional)
    * @return ApiResponse<kotlin.collections.List<AnalizerDataReadDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraGetWithHttpInfo(numHoursBack: kotlin.Int?, coraId: kotlin.Int?) : ApiResponse<kotlin.collections.List<AnalizerDataReadDto>?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraGetRequestConfig(numHoursBack = numHoursBack, coraId = coraId)

        return request<Unit, kotlin.collections.List<AnalizerDataReadDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraGet
    *
    * @param numHoursBack  (optional)
    * @param coraId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetAnalizerDataforCoraGetRequestConfig(numHoursBack: kotlin.Int?, coraId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (numHoursBack != null) {
                    put("numHoursBack", listOf(numHoursBack.toString()))
                }
                if (coraId != null) {
                    put("coraId", listOf(coraId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetAnalizerDataforCora",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return VictoriaMetricsInstantQueryStdResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraInstantMetricsGet(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : VictoriaMetricsInstantQueryStdResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetCoraInstantMetricsGetWithHttpInfo(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsInstantQueryStdResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<VictoriaMetricsInstantQueryStdResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraInstantMetricsGetWithHttpInfo(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<VictoriaMetricsInstantQueryStdResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetCoraInstantMetricsGetRequestConfig(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return request<Unit, VictoriaMetricsInstantQueryStdResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetCoraInstantMetricsGet
    *
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetCoraInstantMetricsGetRequestConfig(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetCoraInstantMetrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param delay  (optional)
    * @return VictoriaMetricsSTDMetricResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricDifferenceWithOffsetGet(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, delay: kotlin.String?) : VictoriaMetricsSTDMetricResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetCoraMetricDifferenceWithOffsetGetWithHttpInfo(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to, delay = delay)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsSTDMetricResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param delay  (optional)
    * @return ApiResponse<VictoriaMetricsSTDMetricResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricDifferenceWithOffsetGetWithHttpInfo(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, delay: kotlin.String?) : ApiResponse<VictoriaMetricsSTDMetricResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetCoraMetricDifferenceWithOffsetGetRequestConfig(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to, delay = delay)

        return request<Unit, VictoriaMetricsSTDMetricResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetCoraMetricDifferenceWithOffsetGet
    *
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param delay  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricDifferenceWithOffsetGetRequestConfig(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, delay: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
                if (delay != null) {
                    put("Delay", listOf(delay.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetCoraMetricDifferenceWithOffset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return VictoriaMetricsSTDMetricResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricsGet(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : VictoriaMetricsSTDMetricResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetCoraMetricsGetWithHttpInfo(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsSTDMetricResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<VictoriaMetricsSTDMetricResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricsGetWithHttpInfo(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<VictoriaMetricsSTDMetricResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetCoraMetricsGetRequestConfig(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return request<Unit, VictoriaMetricsSTDMetricResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetCoraMetricsGet
    *
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricsGetRequestConfig(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetCoraMetrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return kotlin.collections.List<VictoriaMetricsSTDMetricRawResponse>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricsRawGet(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : kotlin.collections.List<VictoriaMetricsSTDMetricRawResponse> {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetCoraMetricsRawGetWithHttpInfo(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<VictoriaMetricsSTDMetricRawResponse>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<kotlin.collections.List<VictoriaMetricsSTDMetricRawResponse>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricsRawGetWithHttpInfo(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<kotlin.collections.List<VictoriaMetricsSTDMetricRawResponse>?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetCoraMetricsRawGetRequestConfig(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return request<Unit, kotlin.collections.List<VictoriaMetricsSTDMetricRawResponse>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetCoraMetricsRawGet
    *
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricsRawGetRequestConfig(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetCoraMetricsRaw",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param delay  (optional)
    * @return VictoriaMetricsSTDMetricResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricswithDelayGet(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, delay: kotlin.String?) : VictoriaMetricsSTDMetricResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetCoraMetricswithDelayGetWithHttpInfo(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to, delay = delay)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsSTDMetricResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param delay  (optional)
    * @return ApiResponse<VictoriaMetricsSTDMetricResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricswithDelayGetWithHttpInfo(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, delay: kotlin.String?) : ApiResponse<VictoriaMetricsSTDMetricResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetCoraMetricswithDelayGetRequestConfig(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to, delay = delay)

        return request<Unit, VictoriaMetricsSTDMetricResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetCoraMetricswithDelayGet
    *
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param delay  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetCoraMetricswithDelayGetRequestConfig(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, delay: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
                if (delay != null) {
                    put("Delay", listOf(delay.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetCoraMetricswithDelay",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return kotlin.Double
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetMetricTotalOverTimeGet(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : kotlin.Double {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetMetricTotalOverTimeGetWithHttpInfo(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Double
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<kotlin.Double?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetMetricTotalOverTimeGetWithHttpInfo(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<kotlin.Double?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetMetricTotalOverTimeGetRequestConfig(coraIdStr = coraIdStr, metricName = metricName, from = from, to = to)

        return request<Unit, kotlin.Double>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetMetricTotalOverTimeGet
    *
    * @param coraIdStr  (optional)
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetMetricTotalOverTimeGetRequestConfig(coraIdStr: kotlin.String?, metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetMetricTotalOverTime",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param coraIdStr  (optional)
    * @param plsNum  (optional)
    * @param nodeNum  (optional)
    * @param groupId  (optional)
    * @param dataGroupMode  (optional)
    * @param nodeMetricRequestType  (optional)
    * @return VictoriaMetricsInstantQueryStdResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetNodeInstantMetricGet(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, coraIdStr: kotlin.String?, plsNum: kotlin.Int?, nodeNum: kotlin.Int?, groupId: kotlin.Int?, dataGroupMode: DataGroupMode?, nodeMetricRequestType: NodeMetricRequestType?) : VictoriaMetricsInstantQueryStdResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetNodeInstantMetricGetWithHttpInfo(metricName = metricName, from = from, to = to, coraIdStr = coraIdStr, plsNum = plsNum, nodeNum = nodeNum, groupId = groupId, dataGroupMode = dataGroupMode, nodeMetricRequestType = nodeMetricRequestType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsInstantQueryStdResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param coraIdStr  (optional)
    * @param plsNum  (optional)
    * @param nodeNum  (optional)
    * @param groupId  (optional)
    * @param dataGroupMode  (optional)
    * @param nodeMetricRequestType  (optional)
    * @return ApiResponse<VictoriaMetricsInstantQueryStdResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetNodeInstantMetricGetWithHttpInfo(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, coraIdStr: kotlin.String?, plsNum: kotlin.Int?, nodeNum: kotlin.Int?, groupId: kotlin.Int?, dataGroupMode: DataGroupMode?, nodeMetricRequestType: NodeMetricRequestType?) : ApiResponse<VictoriaMetricsInstantQueryStdResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetNodeInstantMetricGetRequestConfig(metricName = metricName, from = from, to = to, coraIdStr = coraIdStr, plsNum = plsNum, nodeNum = nodeNum, groupId = groupId, dataGroupMode = dataGroupMode, nodeMetricRequestType = nodeMetricRequestType)

        return request<Unit, VictoriaMetricsInstantQueryStdResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetNodeInstantMetricGet
    *
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param coraIdStr  (optional)
    * @param plsNum  (optional)
    * @param nodeNum  (optional)
    * @param groupId  (optional)
    * @param dataGroupMode  (optional)
    * @param nodeMetricRequestType  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetNodeInstantMetricGetRequestConfig(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, coraIdStr: kotlin.String?, plsNum: kotlin.Int?, nodeNum: kotlin.Int?, groupId: kotlin.Int?, dataGroupMode: DataGroupMode?, nodeMetricRequestType: NodeMetricRequestType?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (plsNum != null) {
                    put("PlsNum", listOf(plsNum.toString()))
                }
                if (nodeNum != null) {
                    put("NodeNum", listOf(nodeNum.toString()))
                }
                if (groupId != null) {
                    put("GroupId", listOf(groupId.toString()))
                }
                if (dataGroupMode != null) {
                    put("DataGroupMode", listOf(dataGroupMode.toString()))
                }
                if (nodeMetricRequestType != null) {
                    put("NodeMetricRequestType", listOf(nodeMetricRequestType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetNodeInstantMetric",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param coraIdStr  (optional)
    * @param plsNum  (optional)
    * @param nodeNum  (optional)
    * @param groupId  (optional)
    * @param dataGroupMode  (optional)
    * @param nodeMetricRequestType  (optional)
    * @return VictoriaMetricsSTDMetricResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetNodeMetricGet(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, coraIdStr: kotlin.String?, plsNum: kotlin.Int?, nodeNum: kotlin.Int?, groupId: kotlin.Int?, dataGroupMode: DataGroupMode?, nodeMetricRequestType: NodeMetricRequestType?) : VictoriaMetricsSTDMetricResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetNodeMetricGetWithHttpInfo(metricName = metricName, from = from, to = to, coraIdStr = coraIdStr, plsNum = plsNum, nodeNum = nodeNum, groupId = groupId, dataGroupMode = dataGroupMode, nodeMetricRequestType = nodeMetricRequestType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsSTDMetricResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param coraIdStr  (optional)
    * @param plsNum  (optional)
    * @param nodeNum  (optional)
    * @param groupId  (optional)
    * @param dataGroupMode  (optional)
    * @param nodeMetricRequestType  (optional)
    * @return ApiResponse<VictoriaMetricsSTDMetricResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetNodeMetricGetWithHttpInfo(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, coraIdStr: kotlin.String?, plsNum: kotlin.Int?, nodeNum: kotlin.Int?, groupId: kotlin.Int?, dataGroupMode: DataGroupMode?, nodeMetricRequestType: NodeMetricRequestType?) : ApiResponse<VictoriaMetricsSTDMetricResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetNodeMetricGetRequestConfig(metricName = metricName, from = from, to = to, coraIdStr = coraIdStr, plsNum = plsNum, nodeNum = nodeNum, groupId = groupId, dataGroupMode = dataGroupMode, nodeMetricRequestType = nodeMetricRequestType)

        return request<Unit, VictoriaMetricsSTDMetricResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetNodeMetricGet
    *
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @param coraIdStr  (optional)
    * @param plsNum  (optional)
    * @param nodeNum  (optional)
    * @param groupId  (optional)
    * @param dataGroupMode  (optional)
    * @param nodeMetricRequestType  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetNodeMetricGetRequestConfig(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?, coraIdStr: kotlin.String?, plsNum: kotlin.Int?, nodeNum: kotlin.Int?, groupId: kotlin.Int?, dataGroupMode: DataGroupMode?, nodeMetricRequestType: NodeMetricRequestType?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
                if (coraIdStr != null) {
                    put("CoraIdStr", listOf(coraIdStr.toString()))
                }
                if (plsNum != null) {
                    put("PlsNum", listOf(plsNum.toString()))
                }
                if (nodeNum != null) {
                    put("NodeNum", listOf(nodeNum.toString()))
                }
                if (groupId != null) {
                    put("GroupId", listOf(groupId.toString()))
                }
                if (dataGroupMode != null) {
                    put("DataGroupMode", listOf(dataGroupMode.toString()))
                }
                if (nodeMetricRequestType != null) {
                    put("NodeMetricRequestType", listOf(nodeMetricRequestType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetNodeMetric",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return VictoriaMetricsSTDMetricResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricAVGGet(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : VictoriaMetricsSTDMetricResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetTenantMetricAVGGetWithHttpInfo(metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsSTDMetricResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<VictoriaMetricsSTDMetricResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricAVGGetWithHttpInfo(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<VictoriaMetricsSTDMetricResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetTenantMetricAVGGetRequestConfig(metricName = metricName, from = from, to = to)

        return request<Unit, VictoriaMetricsSTDMetricResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetTenantMetricAVGGet
    *
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricAVGGetRequestConfig(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetTenantMetricAVG",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return VictoriaMetricsSTDMetricResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricSumGet(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : VictoriaMetricsSTDMetricResponse {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetTenantMetricSumGetWithHttpInfo(metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VictoriaMetricsSTDMetricResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<VictoriaMetricsSTDMetricResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricSumGetWithHttpInfo(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<VictoriaMetricsSTDMetricResponse?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetTenantMetricSumGetRequestConfig(metricName = metricName, from = from, to = to)

        return request<Unit, VictoriaMetricsSTDMetricResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetTenantMetricSumGet
    *
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricSumGetRequestConfig(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetTenantMetricSum",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return kotlin.Double
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricTotalOverTimeGet(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : kotlin.Double {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceGetTenantMetricTotalOverTimeGetWithHttpInfo(metricName = metricName, from = from, to = to)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Double
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return ApiResponse<kotlin.Double?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricTotalOverTimeGetWithHttpInfo(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : ApiResponse<kotlin.Double?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceGetTenantMetricTotalOverTimeGetRequestConfig(metricName = metricName, from = from, to = to)

        return request<Unit, kotlin.Double>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceGetTenantMetricTotalOverTimeGet
    *
    * @param metricName  (optional)
    * @param from  (optional)
    * @param to  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceGetTenantMetricTotalOverTimeGetRequestConfig(metricName: kotlin.String?, from: java.time.OffsetDateTime?, to: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (metricName != null) {
                    put("MetricName", listOf(metricName.toString()))
                }
                if (from != null) {
                    put("From", listOf(parseDateToQueryString(from)))
                }
                if (to != null) {
                    put("To", listOf(parseDateToQueryString(to)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/CoraAnalizerDataService/GetTenantMetricTotalOverTime",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param analizerDataDto  (optional)
    * @return CoraBoolResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceSaveAnalizerDataPost(analizerDataDto: AnalizerDataDto?) : CoraBoolResponseDto {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceSaveAnalizerDataPostWithHttpInfo(analizerDataDto = analizerDataDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param analizerDataDto  (optional)
    * @return ApiResponse<CoraBoolResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceSaveAnalizerDataPostWithHttpInfo(analizerDataDto: AnalizerDataDto?) : ApiResponse<CoraBoolResponseDto?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceSaveAnalizerDataPostRequestConfig(analizerDataDto = analizerDataDto)

        return request<AnalizerDataDto, CoraBoolResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceSaveAnalizerDataPost
    *
    * @param analizerDataDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceSaveAnalizerDataPostRequestConfig(analizerDataDto: AnalizerDataDto?) : RequestConfig<AnalizerDataDto> {
        val localVariableBody = analizerDataDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/CoraAnalizerDataService/SaveAnalizerData",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppCoraAnalizerDataServiceSendTestNotificationPost() : Unit {
        val localVarResponse = apiServicesAppCoraAnalizerDataServiceSendTestNotificationPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppCoraAnalizerDataServiceSendTestNotificationPostWithHttpInfo() : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppCoraAnalizerDataServiceSendTestNotificationPostRequestConfig()

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppCoraAnalizerDataServiceSendTestNotificationPost
    *
    * @return RequestConfig
    */
    fun apiServicesAppCoraAnalizerDataServiceSendTestNotificationPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/CoraAnalizerDataService/SendTestNotification",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
