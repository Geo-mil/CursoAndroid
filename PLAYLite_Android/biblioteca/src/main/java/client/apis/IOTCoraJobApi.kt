/**
 * PriluxWebUI API
 *
 * PriluxWebUI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.CoraAstronomicalClockConfigureDto
import org.openapitools.client.models.CoraBoolErrorResponseDto
import org.openapitools.client.models.CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
import org.openapitools.client.models.CoraGroupAstronomicalClockConfigureDto
import org.openapitools.client.models.IOTCoraFirmwareUpdateJobDto
import org.openapitools.client.models.IOTCoraGroupFirmwareUpdateJobDto
import org.openapitools.client.models.IOTCoraJobDto
import org.openapitools.client.models.IOTCoraJobDtoPagedResultDto
import org.openapitools.client.models.IOTCoraManagementJobDto
import org.openapitools.client.models.IOTJobStatus
import org.openapitools.client.models.IOTJobType
import org.openapitools.client.models.IOTMaintenanceModeConfigDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class IOTCoraJobApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param coraGroupAstronomicalClockConfigureDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobConfigureGroupAstronomicalClockPost(coraGroupAstronomicalClockConfigureDto: CoraGroupAstronomicalClockConfigureDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppIOTCoraJobConfigureGroupAstronomicalClockPostWithHttpInfo(coraGroupAstronomicalClockConfigureDto = coraGroupAstronomicalClockConfigureDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraGroupAstronomicalClockConfigureDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobConfigureGroupAstronomicalClockPostWithHttpInfo(coraGroupAstronomicalClockConfigureDto: CoraGroupAstronomicalClockConfigureDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobConfigureGroupAstronomicalClockPostRequestConfig(coraGroupAstronomicalClockConfigureDto = coraGroupAstronomicalClockConfigureDto)

        return request<CoraGroupAstronomicalClockConfigureDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobConfigureGroupAstronomicalClockPost
    *
    * @param coraGroupAstronomicalClockConfigureDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobConfigureGroupAstronomicalClockPostRequestConfig(coraGroupAstronomicalClockConfigureDto: CoraGroupAstronomicalClockConfigureDto?) : RequestConfig<CoraGroupAstronomicalClockConfigureDto> {
        val localVariableBody = coraGroupAstronomicalClockConfigureDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/ConfigureGroupAstronomicalClock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param coraAstronomicalClockConfigureDto  (optional)
    * @return CoraBoolErrorResponseDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobCoonfigureAstronomicalClockPost(coraAstronomicalClockConfigureDto: CoraAstronomicalClockConfigureDto?) : CoraBoolErrorResponseDto {
        val localVarResponse = apiServicesAppIOTCoraJobCoonfigureAstronomicalClockPostWithHttpInfo(coraAstronomicalClockConfigureDto = coraAstronomicalClockConfigureDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraBoolErrorResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraAstronomicalClockConfigureDto  (optional)
    * @return ApiResponse<CoraBoolErrorResponseDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobCoonfigureAstronomicalClockPostWithHttpInfo(coraAstronomicalClockConfigureDto: CoraAstronomicalClockConfigureDto?) : ApiResponse<CoraBoolErrorResponseDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobCoonfigureAstronomicalClockPostRequestConfig(coraAstronomicalClockConfigureDto = coraAstronomicalClockConfigureDto)

        return request<CoraAstronomicalClockConfigureDto, CoraBoolErrorResponseDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobCoonfigureAstronomicalClockPost
    *
    * @param coraAstronomicalClockConfigureDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobCoonfigureAstronomicalClockPostRequestConfig(coraAstronomicalClockConfigureDto: CoraAstronomicalClockConfigureDto?) : RequestConfig<CoraAstronomicalClockConfigureDto> {
        val localVariableBody = coraAstronomicalClockConfigureDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/CoonfigureAstronomicalClock",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param ioTMaintenanceModeConfigDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobCreateMaintenanceModeJobPost(ioTMaintenanceModeConfigDto: IOTMaintenanceModeConfigDto?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobCreateMaintenanceModeJobPostWithHttpInfo(ioTMaintenanceModeConfigDto = ioTMaintenanceModeConfigDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param ioTMaintenanceModeConfigDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobCreateMaintenanceModeJobPostWithHttpInfo(ioTMaintenanceModeConfigDto: IOTMaintenanceModeConfigDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobCreateMaintenanceModeJobPostRequestConfig(ioTMaintenanceModeConfigDto = ioTMaintenanceModeConfigDto)

        return request<IOTMaintenanceModeConfigDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobCreateMaintenanceModeJobPost
    *
    * @param ioTMaintenanceModeConfigDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobCreateMaintenanceModeJobPostRequestConfig(ioTMaintenanceModeConfigDto: IOTMaintenanceModeConfigDto?) : RequestConfig<IOTMaintenanceModeConfigDto> {
        val localVariableBody = ioTMaintenanceModeConfigDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/CreateMaintenanceModeJob",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param ioTCoraJobDto  (optional)
    * @return IOTCoraJobDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobCreatePost(ioTCoraJobDto: IOTCoraJobDto?) : IOTCoraJobDto {
        val localVarResponse = apiServicesAppIOTCoraJobCreatePostWithHttpInfo(ioTCoraJobDto = ioTCoraJobDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IOTCoraJobDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param ioTCoraJobDto  (optional)
    * @return ApiResponse<IOTCoraJobDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobCreatePostWithHttpInfo(ioTCoraJobDto: IOTCoraJobDto?) : ApiResponse<IOTCoraJobDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobCreatePostRequestConfig(ioTCoraJobDto = ioTCoraJobDto)

        return request<IOTCoraJobDto, IOTCoraJobDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobCreatePost
    *
    * @param ioTCoraJobDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobCreatePostRequestConfig(ioTCoraJobDto: IOTCoraJobDto?) : RequestConfig<IOTCoraJobDto> {
        val localVariableBody = ioTCoraJobDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/Create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobDeleteDelete(id: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobDeleteDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobDeleteDeleteWithHttpInfo(id: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobDeleteDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobDeleteDelete
    *
    * @param id  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobDeleteDeleteRequestConfig(id: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("Id", listOf(id.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/services/app/IOTCoraJob/Delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobFinishIOTJobWithMessagePost(jobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobFinishIOTJobWithMessagePostWithHttpInfo(jobId = jobId, message = message, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobFinishIOTJobWithMessagePostWithHttpInfo(jobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobFinishIOTJobWithMessagePostRequestConfig(jobId = jobId, message = message, body = body)

        return request<kotlin.Int, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobFinishIOTJobWithMessagePost
    *
    * @param jobId  (optional)
    * @param message  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobFinishIOTJobWithMessagePostRequestConfig(jobId: kotlin.Int?, message: kotlin.String?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (jobId != null) {
                    put("jobId", listOf(jobId.toString()))
                }
                if (message != null) {
                    put("message", listOf(message.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/FinishIOTJobWithMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param jobType  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return IOTCoraJobDtoPagedResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobGetAllGet(jobType: IOTJobType?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : IOTCoraJobDtoPagedResultDto {
        val localVarResponse = apiServicesAppIOTCoraJobGetAllGetWithHttpInfo(jobType = jobType, skipCount = skipCount, maxResultCount = maxResultCount)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IOTCoraJobDtoPagedResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param jobType  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return ApiResponse<IOTCoraJobDtoPagedResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobGetAllGetWithHttpInfo(jobType: IOTJobType?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : ApiResponse<IOTCoraJobDtoPagedResultDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobGetAllGetRequestConfig(jobType = jobType, skipCount = skipCount, maxResultCount = maxResultCount)

        return request<Unit, IOTCoraJobDtoPagedResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobGetAllGet
    *
    * @param jobType  (optional)
    * @param skipCount  (optional)
    * @param maxResultCount  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobGetAllGetRequestConfig(jobType: IOTJobType?, skipCount: kotlin.Int?, maxResultCount: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (jobType != null) {
                    put("JobType", listOf(jobType.toString()))
                }
                if (skipCount != null) {
                    put("SkipCount", listOf(skipCount.toString()))
                }
                if (maxResultCount != null) {
                    put("MaxResultCount", listOf(maxResultCount.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/IOTCoraJob/GetAll",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobGetCoraFirmwareAvailableUpdatesGet() : CoraFirmwareUpgradeAvailableVersionsDtoListResultDto {
        val localVarResponse = apiServicesAppIOTCoraJobGetCoraFirmwareAvailableUpdatesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraFirmwareUpgradeAvailableVersionsDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobGetCoraFirmwareAvailableUpdatesGetWithHttpInfo() : ApiResponse<CoraFirmwareUpgradeAvailableVersionsDtoListResultDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobGetCoraFirmwareAvailableUpdatesGetRequestConfig()

        return request<Unit, CoraFirmwareUpgradeAvailableVersionsDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobGetCoraFirmwareAvailableUpdatesGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobGetCoraFirmwareAvailableUpdatesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/IOTCoraJob/GetCoraFirmwareAvailableUpdates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return IOTCoraJobDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobGetGet(id: kotlin.Int?) : IOTCoraJobDto {
        val localVarResponse = apiServicesAppIOTCoraJobGetGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IOTCoraJobDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param id  (optional)
    * @return ApiResponse<IOTCoraJobDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobGetGetWithHttpInfo(id: kotlin.Int?) : ApiResponse<IOTCoraJobDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobGetGetRequestConfig(id = id)

        return request<Unit, IOTCoraJobDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobGetGet
    *
    * @param id  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobGetGetRequestConfig(id: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (id != null) {
                    put("Id", listOf(id.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/IOTCoraJob/Get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<IOTCoraJobDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobGetIOTJobBatchGet() : kotlin.collections.List<IOTCoraJobDto> {
        val localVarResponse = apiServicesAppIOTCoraJobGetIOTJobBatchGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<IOTCoraJobDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<IOTCoraJobDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobGetIOTJobBatchGetWithHttpInfo() : ApiResponse<kotlin.collections.List<IOTCoraJobDto>?> {
        val localVariableConfig = apiServicesAppIOTCoraJobGetIOTJobBatchGetRequestConfig()

        return request<Unit, kotlin.collections.List<IOTCoraJobDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobGetIOTJobBatchGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobGetIOTJobBatchGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/IOTCoraJob/GetIOTJobBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return kotlin.collections.List<IOTCoraManagementJobDto>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobGetIOTManagementJobBatchGet() : kotlin.collections.List<IOTCoraManagementJobDto> {
        val localVarResponse = apiServicesAppIOTCoraJobGetIOTManagementJobBatchGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<IOTCoraManagementJobDto>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<kotlin.collections.List<IOTCoraManagementJobDto>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobGetIOTManagementJobBatchGetWithHttpInfo() : ApiResponse<kotlin.collections.List<IOTCoraManagementJobDto>?> {
        val localVariableConfig = apiServicesAppIOTCoraJobGetIOTManagementJobBatchGetRequestConfig()

        return request<Unit, kotlin.collections.List<IOTCoraManagementJobDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobGetIOTManagementJobBatchGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobGetIOTManagementJobBatchGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/IOTCoraJob/GetIOTManagementJobBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param iotGroupId  (optional)
    * @param sequenceId  (optional)
    * @param launchTime  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobProgramLuminaryGroupPost(iotGroupId: kotlin.Int?, sequenceId: kotlin.Int?, launchTime: java.time.OffsetDateTime?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobProgramLuminaryGroupPostWithHttpInfo(iotGroupId = iotGroupId, sequenceId = sequenceId, launchTime = launchTime)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param iotGroupId  (optional)
    * @param sequenceId  (optional)
    * @param launchTime  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobProgramLuminaryGroupPostWithHttpInfo(iotGroupId: kotlin.Int?, sequenceId: kotlin.Int?, launchTime: java.time.OffsetDateTime?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobProgramLuminaryGroupPostRequestConfig(iotGroupId = iotGroupId, sequenceId = sequenceId, launchTime = launchTime)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobProgramLuminaryGroupPost
    *
    * @param iotGroupId  (optional)
    * @param sequenceId  (optional)
    * @param launchTime  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobProgramLuminaryGroupPostRequestConfig(iotGroupId: kotlin.Int?, sequenceId: kotlin.Int?, launchTime: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (iotGroupId != null) {
                    put("iotGroupId", listOf(iotGroupId.toString()))
                }
                if (sequenceId != null) {
                    put("sequenceId", listOf(sequenceId.toString()))
                }
                if (launchTime != null) {
                    put("launchTime", listOf(parseDateToQueryString(launchTime)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/ProgramLuminaryGroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param iotCoraId  (optional)
    * @param sequenceId  (optional)
    * @param launchTime  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobProgramLuminaryPost(iotCoraId: kotlin.Int?, sequenceId: kotlin.Int?, launchTime: java.time.OffsetDateTime?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobProgramLuminaryPostWithHttpInfo(iotCoraId = iotCoraId, sequenceId = sequenceId, launchTime = launchTime)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param iotCoraId  (optional)
    * @param sequenceId  (optional)
    * @param launchTime  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobProgramLuminaryPostWithHttpInfo(iotCoraId: kotlin.Int?, sequenceId: kotlin.Int?, launchTime: java.time.OffsetDateTime?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobProgramLuminaryPostRequestConfig(iotCoraId = iotCoraId, sequenceId = sequenceId, launchTime = launchTime)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobProgramLuminaryPost
    *
    * @param iotCoraId  (optional)
    * @param sequenceId  (optional)
    * @param launchTime  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobProgramLuminaryPostRequestConfig(iotCoraId: kotlin.Int?, sequenceId: kotlin.Int?, launchTime: java.time.OffsetDateTime?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (iotCoraId != null) {
                    put("iotCoraId", listOf(iotCoraId.toString()))
                }
                if (sequenceId != null) {
                    put("sequenceId", listOf(sequenceId.toString()))
                }
                if (launchTime != null) {
                    put("launchTime", listOf(parseDateToQueryString(launchTime)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/ProgramLuminary",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param iotGroupId  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobResetIOTCoraGroupPost(iotGroupId: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobResetIOTCoraGroupPostWithHttpInfo(iotGroupId = iotGroupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param iotGroupId  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobResetIOTCoraGroupPostWithHttpInfo(iotGroupId: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobResetIOTCoraGroupPostRequestConfig(iotGroupId = iotGroupId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobResetIOTCoraGroupPost
    *
    * @param iotGroupId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobResetIOTCoraGroupPostRequestConfig(iotGroupId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (iotGroupId != null) {
                    put("iotGroupId", listOf(iotGroupId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/ResetIOTCoraGroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param iotCoraID  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobResetIOTCoraPost(iotCoraID: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobResetIOTCoraPostWithHttpInfo(iotCoraID = iotCoraID)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param iotCoraID  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobResetIOTCoraPostWithHttpInfo(iotCoraID: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobResetIOTCoraPostRequestConfig(iotCoraID = iotCoraID)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobResetIOTCoraPost
    *
    * @param iotCoraID  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobResetIOTCoraPostRequestConfig(iotCoraID: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (iotCoraID != null) {
                    put("iotCoraID", listOf(iotCoraID.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/ResetIOTCora",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param iotCoraIdStr  (optional)
    * @param maintenanceModeEnabled  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobSetMaintenanceModeOnIOTCoraPost(iotCoraIdStr: kotlin.String?, maintenanceModeEnabled: kotlin.Boolean?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobSetMaintenanceModeOnIOTCoraPostWithHttpInfo(iotCoraIdStr = iotCoraIdStr, maintenanceModeEnabled = maintenanceModeEnabled)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param iotCoraIdStr  (optional)
    * @param maintenanceModeEnabled  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobSetMaintenanceModeOnIOTCoraPostWithHttpInfo(iotCoraIdStr: kotlin.String?, maintenanceModeEnabled: kotlin.Boolean?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobSetMaintenanceModeOnIOTCoraPostRequestConfig(iotCoraIdStr = iotCoraIdStr, maintenanceModeEnabled = maintenanceModeEnabled)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobSetMaintenanceModeOnIOTCoraPost
    *
    * @param iotCoraIdStr  (optional)
    * @param maintenanceModeEnabled  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobSetMaintenanceModeOnIOTCoraPostRequestConfig(iotCoraIdStr: kotlin.String?, maintenanceModeEnabled: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (iotCoraIdStr != null) {
                    put("iotCoraIdStr", listOf(iotCoraIdStr.toString()))
                }
                if (maintenanceModeEnabled != null) {
                    put("maintenanceModeEnabled", listOf(maintenanceModeEnabled.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/SetMaintenanceModeOnIOTCora",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @param ioTCoraIdStr  (optional)
    * @param body  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobUpdateIOTJobStatusPut(jobId: kotlin.Int?, ioTCoraIdStr: kotlin.String?, body: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobUpdateIOTJobStatusPutWithHttpInfo(jobId = jobId, ioTCoraIdStr = ioTCoraIdStr, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @param ioTCoraIdStr  (optional)
    * @param body  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobUpdateIOTJobStatusPutWithHttpInfo(jobId: kotlin.Int?, ioTCoraIdStr: kotlin.String?, body: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobUpdateIOTJobStatusPutRequestConfig(jobId = jobId, ioTCoraIdStr = ioTCoraIdStr, body = body)

        return request<kotlin.Int, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobUpdateIOTJobStatusPut
    *
    * @param jobId  (optional)
    * @param ioTCoraIdStr  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobUpdateIOTJobStatusPutRequestConfig(jobId: kotlin.Int?, ioTCoraIdStr: kotlin.String?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (jobId != null) {
                    put("jobId", listOf(jobId.toString()))
                }
                if (ioTCoraIdStr != null) {
                    put("IOTCoraIdStr", listOf(ioTCoraIdStr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/services/app/IOTCoraJob/UpdateIOTJobStatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @param ioTCoraIdStr  (optional)
    * @param body  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobUpdateIOTManagementJobStatusPut(jobId: kotlin.Int?, ioTCoraIdStr: kotlin.String?, body: kotlin.Int?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobUpdateIOTManagementJobStatusPutWithHttpInfo(jobId = jobId, ioTCoraIdStr = ioTCoraIdStr, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param jobId  (optional)
    * @param ioTCoraIdStr  (optional)
    * @param body  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobUpdateIOTManagementJobStatusPutWithHttpInfo(jobId: kotlin.Int?, ioTCoraIdStr: kotlin.String?, body: kotlin.Int?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobUpdateIOTManagementJobStatusPutRequestConfig(jobId = jobId, ioTCoraIdStr = ioTCoraIdStr, body = body)

        return request<kotlin.Int, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobUpdateIOTManagementJobStatusPut
    *
    * @param jobId  (optional)
    * @param ioTCoraIdStr  (optional)
    * @param body  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobUpdateIOTManagementJobStatusPutRequestConfig(jobId: kotlin.Int?, ioTCoraIdStr: kotlin.String?, body: kotlin.Int?) : RequestConfig<kotlin.Int> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (jobId != null) {
                    put("jobId", listOf(jobId.toString()))
                }
                if (ioTCoraIdStr != null) {
                    put("IOTCoraIdStr", listOf(ioTCoraIdStr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/services/app/IOTCoraJob/UpdateIOTManagementJobStatus",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param ioTCoraJobDto  (optional)
    * @return IOTCoraJobDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobUpdatePut(ioTCoraJobDto: IOTCoraJobDto?) : IOTCoraJobDto {
        val localVarResponse = apiServicesAppIOTCoraJobUpdatePutWithHttpInfo(ioTCoraJobDto = ioTCoraJobDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IOTCoraJobDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param ioTCoraJobDto  (optional)
    * @return ApiResponse<IOTCoraJobDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobUpdatePutWithHttpInfo(ioTCoraJobDto: IOTCoraJobDto?) : ApiResponse<IOTCoraJobDto?> {
        val localVariableConfig = apiServicesAppIOTCoraJobUpdatePutRequestConfig(ioTCoraJobDto = ioTCoraJobDto)

        return request<IOTCoraJobDto, IOTCoraJobDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobUpdatePut
    *
    * @param ioTCoraJobDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobUpdatePutRequestConfig(ioTCoraJobDto: IOTCoraJobDto?) : RequestConfig<IOTCoraJobDto> {
        val localVariableBody = ioTCoraJobDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/services/app/IOTCoraJob/Update",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param ioTCoraFirmwareUpdateJobDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobUpgradeIOTCoraFirmwarePost(ioTCoraFirmwareUpdateJobDto: IOTCoraFirmwareUpdateJobDto?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobUpgradeIOTCoraFirmwarePostWithHttpInfo(ioTCoraFirmwareUpdateJobDto = ioTCoraFirmwareUpdateJobDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param ioTCoraFirmwareUpdateJobDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobUpgradeIOTCoraFirmwarePostWithHttpInfo(ioTCoraFirmwareUpdateJobDto: IOTCoraFirmwareUpdateJobDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobUpgradeIOTCoraFirmwarePostRequestConfig(ioTCoraFirmwareUpdateJobDto = ioTCoraFirmwareUpdateJobDto)

        return request<IOTCoraFirmwareUpdateJobDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobUpgradeIOTCoraFirmwarePost
    *
    * @param ioTCoraFirmwareUpdateJobDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobUpgradeIOTCoraFirmwarePostRequestConfig(ioTCoraFirmwareUpdateJobDto: IOTCoraFirmwareUpdateJobDto?) : RequestConfig<IOTCoraFirmwareUpdateJobDto> {
        val localVariableBody = ioTCoraFirmwareUpdateJobDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/UpgradeIOTCoraFirmware",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param ioTCoraGroupFirmwareUpdateJobDto  (optional)
    * @return void
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppIOTCoraJobUpgradeIOTCoraGroupFirmwarePost(ioTCoraGroupFirmwareUpdateJobDto: IOTCoraGroupFirmwareUpdateJobDto?) : Unit {
        val localVarResponse = apiServicesAppIOTCoraJobUpgradeIOTCoraGroupFirmwarePostWithHttpInfo(ioTCoraGroupFirmwareUpdateJobDto = ioTCoraGroupFirmwareUpdateJobDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param ioTCoraGroupFirmwareUpdateJobDto  (optional)
    * @return ApiResponse<Unit?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppIOTCoraJobUpgradeIOTCoraGroupFirmwarePostWithHttpInfo(ioTCoraGroupFirmwareUpdateJobDto: IOTCoraGroupFirmwareUpdateJobDto?) : ApiResponse<Unit?> {
        val localVariableConfig = apiServicesAppIOTCoraJobUpgradeIOTCoraGroupFirmwarePostRequestConfig(ioTCoraGroupFirmwareUpdateJobDto = ioTCoraGroupFirmwareUpdateJobDto)

        return request<IOTCoraGroupFirmwareUpdateJobDto, Unit>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppIOTCoraJobUpgradeIOTCoraGroupFirmwarePost
    *
    * @param ioTCoraGroupFirmwareUpdateJobDto  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppIOTCoraJobUpgradeIOTCoraGroupFirmwarePostRequestConfig(ioTCoraGroupFirmwareUpdateJobDto: IOTCoraGroupFirmwareUpdateJobDto?) : RequestConfig<IOTCoraGroupFirmwareUpdateJobDto> {
        val localVariableBody = ioTCoraGroupFirmwareUpdateJobDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json-patch+json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/services/app/IOTCoraJob/UpgradeIOTCoraGroupFirmware",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
