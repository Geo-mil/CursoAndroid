/**
 * PriluxWebUI API
 *
 * PriluxWebUI
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
import org.openapitools.client.models.P2PCoraAdvancedStatusInfoDto

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class P2PCoraConfigurationApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param coraId  (optional)
    * @return P2PCoraAdvancedStatusInfoDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraConfigurationGetCoraAdvancedStatusInfoGet(coraId: kotlin.Int?) : P2PCoraAdvancedStatusInfoDto {
        val localVarResponse = apiServicesAppP2PCoraConfigurationGetCoraAdvancedStatusInfoGetWithHttpInfo(coraId = coraId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as P2PCoraAdvancedStatusInfoDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param coraId  (optional)
    * @return ApiResponse<P2PCoraAdvancedStatusInfoDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraConfigurationGetCoraAdvancedStatusInfoGetWithHttpInfo(coraId: kotlin.Int?) : ApiResponse<P2PCoraAdvancedStatusInfoDto?> {
        val localVariableConfig = apiServicesAppP2PCoraConfigurationGetCoraAdvancedStatusInfoGetRequestConfig(coraId = coraId)

        return request<Unit, P2PCoraAdvancedStatusInfoDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraConfigurationGetCoraAdvancedStatusInfoGet
    *
    * @param coraId  (optional)
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraConfigurationGetCoraAdvancedStatusInfoGetRequestConfig(coraId: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (coraId != null) {
                    put("CoraId", listOf(coraId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraConfiguration/GetCoraAdvancedStatusInfo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiServicesAppP2PCoraConfigurationGetCoraFirmwareAvailableUpdatesGet() : CoraFirmwareUpgradeAvailableVersionsDtoListResultDto {
        val localVarResponse = apiServicesAppP2PCoraConfigurationGetCoraFirmwareAvailableUpdatesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CoraFirmwareUpgradeAvailableVersionsDtoListResultDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiResponse<CoraFirmwareUpgradeAvailableVersionsDtoListResultDto?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiServicesAppP2PCoraConfigurationGetCoraFirmwareAvailableUpdatesGetWithHttpInfo() : ApiResponse<CoraFirmwareUpgradeAvailableVersionsDtoListResultDto?> {
        val localVariableConfig = apiServicesAppP2PCoraConfigurationGetCoraFirmwareAvailableUpdatesGetRequestConfig()

        return request<Unit, CoraFirmwareUpgradeAvailableVersionsDtoListResultDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation apiServicesAppP2PCoraConfigurationGetCoraFirmwareAvailableUpdatesGet
    *
    * @return RequestConfig
    */
    fun apiServicesAppP2PCoraConfigurationGetCoraFirmwareAvailableUpdatesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/services/app/P2PCoraConfiguration/GetCoraFirmwareAvailableUpdates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
